head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2014.05.13.04.39.41;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.11.10.25.54;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.11.01.00.29;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.08.18.15.42;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.08.17.15.35;	author root;	state Exp;
branches;
next	;


desc
@This is cleanup funcion for charcter driver
@


1.5
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declaration.h"
void __exit cleanup(void)
{
int i;
#ifdef DEBUG
printk(KERN_INFO"This is exit function=%s\n",__func__);
#endif
for(i=0;i<nod;i++)
{

cdev_del(&(sculldev[i].c_dev));
#ifdef DEBUG
printk("value of minor%d",i);
#endif
}
kfree(sculldev);
unregister_chrdev_region(dev,nod);
#ifdef DEBUG
printk(KERN_INFO"bye kernel\n");
#endif
}
module_exit(cleanup);
@


1.4
log
@*** empty log message ***
@
text
@d5 6
d12 8
a19 1
printk(KERN_INFO"This is exit function=%s\n",__func__);
d21 1
a21 2
unregister_chrdev_region(dev,1);

@


1.3
log
@used unregister_chrdev_region macro,,,,
but not successfull in unregistering the device
@
text
@d8 1
a8 1
unregister_chrdev_region(dev,0);
@


1.2
log
@unregister driver using unregister_region
@
text
@d3 1
a3 1
static void __exit cleanup(void)
d7 2
a8 2
prink(KERN_INFO"bye kernel\n");
unregister_region(major_no,DEVICE_NAME);
@


1.1
log
@Initial revision
@
text
@d2 1
d7 2
a8 2
printk(KERN_INFO"bye kernel\n");

@
