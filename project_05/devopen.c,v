head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2014.05.15.19.51.16;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.13.04.52.38;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2014.05.13.04.39.41;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.13.01.47.30;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.13.01.41.15;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.13.01.12.29;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.13.00.55.52;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.11.10.29.32;	author root;	state Exp;
branches;
next	;


desc
@@


1.8
log
@*** empty log message ***
@
text
@#include"prototypes.h"
/*
 int sculltrim(struct ScullDev *);
int sculltrim(struct ScullDev *fsculldev)
{
struct ScullQset *lscullqset,*bptrscullqset;
lscullqset=bptrscullqset=NULL;
if(!fsculldev)
{
	printk(KERN_ERR"error in fsculldev pointer\n");
	return -1;
}
if(!fsculldev->scullqset)
{
	printk(KERN_INFO"no scullqset\n");
}
while(bptrscullqset->next)
bptrscullqset=bptrscullqset->next;
return 0;
}*/
int devopen(struct inode *inodep,struct file *filep)
{
struct ScullDev *lsculldev;
//int ret;
#ifdef DEBUG
printk(KERN_INFO"hi i am open %s\n",__func__);
#endif
lsculldev=NULL;
lsculldev=container_of(inodep->i_cdev,struct ScullDev,c_dev);
if(!lsculldev)
{

#ifdef DEBUG
printk(KERN_ERR"\n");
#endif
}
filep->private_data=lsculldev;
if((filep->f_flags & O_ACCMODE)==O_WRONLY)
{
#ifdef DEBUG
printk(KERN_INFO"module open for write only\n");
#endif
/*ret=sculltrim(lsculldev);
if(ret<0)
{
	printk(KERN_ERR"error in sculltrim\n");
	goto OUT;
}*/
}


//OUT:
//	return -1;
return 0;
}
@


1.7
log
@*** empty log message ***
@
text
@d2 2
a3 1
int sculltrim(struct ScullDev *);
d20 1
a20 1
}
d24 1
a24 1
int ret;
d43 1
a43 1
ret=sculltrim(lsculldev);
d48 1
a48 1
}
d52 2
a53 2
OUT:
	return -1;
@


1.6
log
@write sculltrim function
@
text
@d6 1
d16 2
a17 2
while(&bptrscullqset->next)
bptrscullqset=&bptrscullqset->next;
@


1.5
log
@used container of
@
text
@d2 17
d22 1
d36 12
d50 2
a51 1

@


1.4
log
@debug
@
text
@d9 1
a9 1
//lsculldev=container_of(inodep->i_cdev,struct ScullDev,c_dev);
d17 1
a17 1
//filep->private_data=lsculldev;
@


1.3
log
@fixed a bug
@
text
@d8 2
a9 1
lsculldev=container_of(inodep->i_cdev,struct ScullDev,c_dev);
d17 1
a17 2
filep->private_data=lsculldev;

d21 1
@


1.2
log
@catche the value of cdev from filep->priatedata
used containet_of to get sculldev address.
@
text
@d5 1
a5 1
#ifdef
d8 1
a8 1
lsculldev=container_of(inodep->i_cdev,struct scullDev,c_dev);
d12 1
a12 1
#ifdef
@


1.1
log
@Initial revision
@
text
@d4 14
a17 4
//struct ScullDev *lsculldev;
//lsculldev=container_of(inodep->i_cdev,struct scullDev,c_dev);
//filep->private_data=lsculldev;
printk(KERN_INFO"hi i am open");
@
