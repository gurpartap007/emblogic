head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2014.05.15.20.43.08;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.15.20.38.52;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2014.05.15.19.51.19;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.13.05.30.14;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.13.05.19.40;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.13.01.47.40;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.13.01.12.46;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.13.00.56.50;	author root;	state Exp;
branches;
next	;


desc
@This is scull write function
@


1.8
log
@*** empty log message ***
@
text
@#include"prototypes.h"
#include"declaration.h"
int createquantum(int noqr)
{



		#ifdef DEBUG
		printk(KERN_INFO"IN-->%s\n",__func__);
		#endif
		return 0;
}

struct ScullQset * createqset(int nosqr)
{

		#ifdef DEBUG
		printk(KERN_INFO"IN-->%s\n",__func__);
		#endif
struct ScullQset *lscullqset;
lscullqset=NULL;
	lscullqset=(struct ScullQset *)kmalloc(sizeof(struct ScullQset),GFP_KERNEL);

	if(!lscullqset)
	{	
		#ifdef DEBUG
		printk(KERN_ERR"error no scullqset found\n");
		#endif
		goto OUT;
	}

	return lscullqset;

OUT:
	#ifdef DEBUG
	printk(KERN_ERR"error cannot create scullqset\n");
	#endif
	return lscullqset;
	
		
}
ssize_t devwrite(struct file *filep,const char __user *buffer,size_t size,loff_t *loff_t)
{  	int quantum_size=8,qset_size=8, data_size=100,device_size=100;
	struct ScullDev *lsculldev;
	struct ScullQset *lscullqset;
	int nosqr;
	#ifdef DEBUG
	printk(KERN_INFO"write function%s\n",__func__);
	#endif


lsculldev=filep->private_data;
	lscullqset=NULL;
	if(!lsculldev)
	{
		#ifdef DEBUG
		printk(KERN_ERR"error no sculldev found\n");
		#endif
		goto OUT;
	}
	lsculldev->quantum_size=quantum_size;
	lsculldev->qset_size=qset_size;
	lsculldev->data_size=data_size;
	lsculldev->device_size=device_size;

	if(lsculldev->scullqset)
{	nosqr = size/(quantum_size*qset_size);

	if(size%(quantum_size*qset_size))
	nosqr++;
		#ifdef DEBUG
		printk(KERN_ERR"no of scullqset require =%d\n",nosqr);
		#endif
	lscullqset=createqset(nosqr);
}
	if(!lscullqset)
	{	
		#ifdef DEBUG
		printk(KERN_ERR"error no scullqset found\n");
		#endif
		goto OUT;
	}
	if(lscullqset->data)
	{
	int noqr;
	//char *quantum;
	noqr=size/quantum_size;
	createquantum(noqr);
	
	
	}
OUT: 
	#ifdef DEBUG
	printk(KERN_ERR"error \n");
	#endif
	return -1;

return 0;
}
@


1.7
log
@declare createqset and createquantum
finded noqsr and noqr
@
text
@d21 2
a22 2

	lscullqset=(struct ScullDev *)kmalloc(sizeof(struct ScullQset),GFP_KERNEL);
d38 1
a38 1
	return -1;
@


1.6
log
@*** empty log message ***
@
text
@d3 39
d45 2
a46 1
//	struct ScullQset *lscullqset;
d50 4
a53 2
	lsculldev=filep->private_data;
//	lscullqset=NULL;
a60 1
//	lscullqset=(struct ScullDev *)kmalloc(sizeof(struct ScullQset),GFP_KERNEL);
d66 11
a76 1
	if(!lsculldev)
d79 1
a79 1
		printk(KERN_ERR"error no sculldev found\n");
d83 9
d94 1
a94 1
	printk(KERN_ERR"error no sculldev found\n");
@


1.5
log
@*** empty log message ***
@
text
@d6 1
a6 1
	struct ScullQset *lscullqset;
d11 1
a11 1
	lscullqset=NULL;
d19 5
a23 1
	lscullqset=(struct ScullDev *)kmalloc(sizeof(struct ScullQset),GFP_KERNEL);
d37 2
@


1.4
log
@*** empty log message ***
@
text
@d2 1
d4 1
a4 1
{  	//int quantum_size=8,qset_size=8, data_size=100,device_size=100;
d19 1
a19 1
	//lscullqset=(struct ScullDev *)kmalloc(sizeof(struct ScullQset),GFP_KERNEL);
@


1.3
log
@assign lscullqset=NULL
@
text
@d3 1
a3 1
{
@


1.2
log
@kmalloc for scullqset no working properly
omiited kmalloc
@
text
@d10 1
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
	lscullqset=(struct ScullDev *)kmalloc(sizeof(struct scullQset));
@
